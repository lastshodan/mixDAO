/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface NexusContract extends Truffle.Contract<NexusInstance> {
  "new"(
    _governorAddr: string,
    meta?: Truffle.TransactionDetails
  ): Promise<NexusInstance>;
}

export interface GovernorChangeCancelled {
  name: "GovernorChangeCancelled";
  args: {
    governor: string;
    proposed: string;
    0: string;
    1: string;
  };
}

export interface GovernorChangeClaimed {
  name: "GovernorChangeClaimed";
  args: {
    proposedGovernor: string;
    0: string;
  };
}

export interface GovernorChangeRequested {
  name: "GovernorChangeRequested";
  args: {
    governor: string;
    proposed: string;
    0: string;
    1: string;
  };
}

export interface GovernorChanged {
  name: "GovernorChanged";
  args: {
    previousGovernor: string;
    newGovernor: string;
    0: string;
    1: string;
  };
}

export interface ModuleAdded {
  name: "ModuleAdded";
  args: {
    key: string;
    addr: string;
    isLocked: boolean;
    0: string;
    1: string;
    2: boolean;
  };
}

export interface ModuleCancelled {
  name: "ModuleCancelled";
  args: {
    key: string;
    0: string;
  };
}

export interface ModuleLockCancelled {
  name: "ModuleLockCancelled";
  args: {
    key: string;
    0: string;
  };
}

export interface ModuleLockEnabled {
  name: "ModuleLockEnabled";
  args: {
    key: string;
    0: string;
  };
}

export interface ModuleLockRequested {
  name: "ModuleLockRequested";
  args: {
    key: string;
    timestamp: BN;
    0: string;
    1: BN;
  };
}

export interface ModuleProposed {
  name: "ModuleProposed";
  args: {
    key: string;
    addr: string;
    timestamp: BN;
    0: string;
    1: string;
    2: BN;
  };
}

type AllEvents =
  | GovernorChangeCancelled
  | GovernorChangeClaimed
  | GovernorChangeRequested
  | GovernorChanged
  | ModuleAdded
  | ModuleCancelled
  | ModuleLockCancelled
  | ModuleLockEnabled
  | ModuleLockRequested
  | ModuleProposed;

export interface NexusInstance extends Truffle.ContractInstance {
  UPGRADE_DELAY(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  acceptProposedModule: {
    (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  acceptProposedModules: {
    (_keys: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _keys: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _keys: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _keys: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelGovernorChange: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  cancelLockModule: {
    (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelProposedModule: {
    (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  changeGovernor: {
    (arg0: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimGovernorChange: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  delay(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getModule(
    _key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  governor(txDetails?: Truffle.TransactionDetails): Promise<string>;

  initialize: {
    (
      _keys: string[],
      _addresses: string[],
      _isLocked: boolean[],
      _governorAddr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _keys: string[],
      _addresses: string[],
      _isLocked: boolean[],
      _governorAddr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _keys: string[],
      _addresses: string[],
      _isLocked: boolean[],
      _governorAddr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _keys: string[],
      _addresses: string[],
      _isLocked: boolean[],
      _governorAddr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  isGovernor(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  lockModule: {
    (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  moduleExists(
    _key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  modules(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, boolean]>;

  proposeModule: {
    (
      _key: string,
      _addr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _key: string,
      _addr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _key: string,
      _addr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _key: string,
      _addr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  proposedGovernor(txDetails?: Truffle.TransactionDetails): Promise<string>;

  proposedLockModules(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  proposedModules(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, BN]>;

  requestGovernorChange: {
    (
      _proposedGovernor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proposedGovernor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proposedGovernor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposedGovernor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  requestLockModule: {
    (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  requestTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    UPGRADE_DELAY(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    acceptProposedModule: {
      (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    acceptProposedModules: {
      (_keys: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _keys: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _keys: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _keys: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cancelGovernorChange: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    cancelLockModule: {
      (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cancelProposedModule: {
      (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    changeGovernor: {
      (arg0: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        arg0: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    claimGovernorChange: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    delay(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getModule(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    governor(txDetails?: Truffle.TransactionDetails): Promise<string>;

    initialize: {
      (
        _keys: string[],
        _addresses: string[],
        _isLocked: boolean[],
        _governorAddr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _keys: string[],
        _addresses: string[],
        _isLocked: boolean[],
        _governorAddr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        _keys: string[],
        _addresses: string[],
        _isLocked: boolean[],
        _governorAddr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _keys: string[],
        _addresses: string[],
        _isLocked: boolean[],
        _governorAddr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    initialized(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    isGovernor(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    lockModule: {
      (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    moduleExists(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    modules(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string, boolean]>;

    proposeModule: {
      (
        _key: string,
        _addr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _key: string,
        _addr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _key: string,
        _addr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _key: string,
        _addr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    proposedGovernor(txDetails?: Truffle.TransactionDetails): Promise<string>;

    proposedLockModules(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    proposedModules(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string, BN]>;

    requestGovernorChange: {
      (
        _proposedGovernor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proposedGovernor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proposedGovernor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proposedGovernor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    requestLockModule: {
      (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    requestTime(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
