/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface MintWithKyberContract
  extends Truffle.Contract<MintWithKyberInstance> {
  "new"(
    _kyberNetworkProxy: string,
    _mIxs: string[],
    meta?: Truffle.TransactionDetails
  ): Promise<MintWithKyberInstance>;
}

export interface MixAdded {
  name: "MixAdded";
  args: {
    mIx: string;
    0: string;
  };
}

export interface OwnershipTransferred {
  name: "OwnershipTransferred";
  args: {
    previousOwner: string;
    newOwner: string;
    0: string;
    1: string;
  };
}

type AllEvents = MixAdded | OwnershipTransferred;

export interface MintWithKyberInstance extends Truffle.ContractInstance {
  FEE_COLLECTION_ADDRESS(
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  addMix: {
    (_mIx: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_mIx: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _mIx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _mIx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  buyAndMintGivenMix: {
    (
      _srcBasset: string,
      _destMix: string,
      _amountOfBasset: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _srcBasset: string,
      _destMix: string,
      _amountOfBasset: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _srcBasset: string,
      _destMix: string,
      _amountOfBasset: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _srcBasset: string,
      _destMix: string,
      _amountOfBasset: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  buyAndMintMaxMix: {
    (
      _srcBasset: string,
      _destMix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _srcBasset: string,
      _destMix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _srcBasset: string,
      _destMix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _srcBasset: string,
      _destMix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  buyAndMintMulti: {
    (
      _srcBassets: string[],
      _ethAmount: (number | BN | string)[],
      _destMix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _srcBassets: string[],
      _ethAmount: (number | BN | string)[],
      _destMix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _srcBassets: string[],
      _ethAmount: (number | BN | string)[],
      _destMix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _srcBassets: string[],
      _ethAmount: (number | BN | string)[],
      _destMix: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  infiniteApprove: {
    (
      _mIx: string,
      _bAssets: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _mIx: string,
      _bAssets: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _mIx: string,
      _bAssets: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _mIx: string,
      _bAssets: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  kyberNetworkProxy(txDetails?: Truffle.TransactionDetails): Promise<string>;

  mIxs(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

  renounceOwnership: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  transferOwnership: {
    (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      newOwner: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    FEE_COLLECTION_ADDRESS(
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    addMix: {
      (_mIx: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_mIx: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        _mIx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _mIx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    buyAndMintGivenMix: {
      (
        _srcBasset: string,
        _destMix: string,
        _amountOfBasset: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _srcBasset: string,
        _destMix: string,
        _amountOfBasset: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _srcBasset: string,
        _destMix: string,
        _amountOfBasset: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _srcBasset: string,
        _destMix: string,
        _amountOfBasset: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    buyAndMintMaxMix: {
      (
        _srcBasset: string,
        _destMix: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _srcBasset: string,
        _destMix: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _srcBasset: string,
        _destMix: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _srcBasset: string,
        _destMix: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    buyAndMintMulti: {
      (
        _srcBassets: string[],
        _ethAmount: (number | BN | string)[],
        _destMix: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _srcBassets: string[],
        _ethAmount: (number | BN | string)[],
        _destMix: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _srcBassets: string[],
        _ethAmount: (number | BN | string)[],
        _destMix: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _srcBassets: string[],
        _ethAmount: (number | BN | string)[],
        _destMix: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    infiniteApprove: {
      (
        _mIx: string,
        _bAssets: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _mIx: string,
        _bAssets: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _mIx: string,
        _bAssets: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _mIx: string,
        _bAssets: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    isOwner(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    kyberNetworkProxy(txDetails?: Truffle.TransactionDetails): Promise<string>;

    mIxs(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    owner(txDetails?: Truffle.TransactionDetails): Promise<string>;

    renounceOwnership: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    transferOwnership: {
      (newOwner: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        newOwner: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
