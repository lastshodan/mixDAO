/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface SaveWrapperContract
  extends Truffle.Contract<SaveWrapperInstance> {
  "new"(
    _save: string,
    _vault: string,
    _mIx: string,
    _bAssets: string[],
    _uniswapAddress: string,
    _curveAddress: string,
    _curveAssets: string[],
    meta?: Truffle.TransactionDetails
  ): Promise<SaveWrapperInstance>;
}

type AllEvents = never;

export interface SaveWrapperInstance extends Truffle.ContractInstance {
  estimate_saveViaCurve(
    _curvePosition: number | BN | string,
    _amountIn: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  estimate_saveViaUniswapETH(
    _ethAmount: number | BN | string,
    _path: string[],
    _curvePosition: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  saveAndStake: {
    (
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  saveViaCurve: {
    (
      _input: string,
      _curvePosition: number | BN | string,
      _amountIn: number | BN | string,
      _minOutCrv: number | BN | string,
      _stake: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _input: string,
      _curvePosition: number | BN | string,
      _amountIn: number | BN | string,
      _minOutCrv: number | BN | string,
      _stake: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _input: string,
      _curvePosition: number | BN | string,
      _amountIn: number | BN | string,
      _minOutCrv: number | BN | string,
      _stake: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _input: string,
      _curvePosition: number | BN | string,
      _amountIn: number | BN | string,
      _minOutCrv: number | BN | string,
      _stake: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  saveViaMint: {
    (
      _bAsset: string,
      _amt: number | BN | string,
      _stake: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bAsset: string,
      _amt: number | BN | string,
      _stake: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _bAsset: string,
      _amt: number | BN | string,
      _stake: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAsset: string,
      _amt: number | BN | string,
      _stake: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  saveViaUniswapETH: {
    (
      _amountOutMin: number | BN | string,
      _path: string[],
      _curvePosition: number | BN | string,
      _minOutCrv: number | BN | string,
      _stake: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _amountOutMin: number | BN | string,
      _path: string[],
      _curvePosition: number | BN | string,
      _minOutCrv: number | BN | string,
      _stake: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _amountOutMin: number | BN | string,
      _path: string[],
      _curvePosition: number | BN | string,
      _minOutCrv: number | BN | string,
      _stake: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _amountOutMin: number | BN | string,
      _path: string[],
      _curvePosition: number | BN | string,
      _minOutCrv: number | BN | string,
      _stake: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    estimate_saveViaCurve(
      _curvePosition: number | BN | string,
      _amountIn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    estimate_saveViaUniswapETH(
      _ethAmount: number | BN | string,
      _path: string[],
      _curvePosition: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    saveAndStake: {
      (
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    saveViaCurve: {
      (
        _input: string,
        _curvePosition: number | BN | string,
        _amountIn: number | BN | string,
        _minOutCrv: number | BN | string,
        _stake: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _input: string,
        _curvePosition: number | BN | string,
        _amountIn: number | BN | string,
        _minOutCrv: number | BN | string,
        _stake: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _input: string,
        _curvePosition: number | BN | string,
        _amountIn: number | BN | string,
        _minOutCrv: number | BN | string,
        _stake: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _input: string,
        _curvePosition: number | BN | string,
        _amountIn: number | BN | string,
        _minOutCrv: number | BN | string,
        _stake: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    saveViaMint: {
      (
        _bAsset: string,
        _amt: number | BN | string,
        _stake: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bAsset: string,
        _amt: number | BN | string,
        _stake: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _bAsset: string,
        _amt: number | BN | string,
        _stake: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAsset: string,
        _amt: number | BN | string,
        _stake: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    saveViaUniswapETH: {
      (
        _amountOutMin: number | BN | string,
        _path: string[],
        _curvePosition: number | BN | string,
        _minOutCrv: number | BN | string,
        _stake: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _amountOutMin: number | BN | string,
        _path: string[],
        _curvePosition: number | BN | string,
        _minOutCrv: number | BN | string,
        _stake: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _amountOutMin: number | BN | string,
        _path: string[],
        _curvePosition: number | BN | string,
        _minOutCrv: number | BN | string,
        _stake: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _amountOutMin: number | BN | string,
        _path: string[],
        _curvePosition: number | BN | string,
        _minOutCrv: number | BN | string,
        _stake: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
