/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface CompoundIntegrationContract
  extends Truffle.Contract<CompoundIntegrationInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<CompoundIntegrationInstance>;
}

export interface Deposit {
  name: "Deposit";
  args: {
    _bAsset: string;
    _pToken: string;
    _amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface PTokenAdded {
  name: "PTokenAdded";
  args: {
    _bAsset: string;
    _pToken: string;
    0: string;
    1: string;
  };
}

export interface PlatformWithdrawal {
  name: "PlatformWithdrawal";
  args: {
    bAsset: string;
    pToken: string;
    totalAmount: BN;
    userAmount: BN;
    0: string;
    1: string;
    2: BN;
    3: BN;
  };
}

export interface RewardTokenApproved {
  name: "RewardTokenApproved";
  args: {
    rewardToken: string;
    account: string;
    0: string;
    1: string;
  };
}

export interface SkippedWithdrawal {
  name: "SkippedWithdrawal";
  args: {
    bAsset: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

export interface Whitelisted {
  name: "Whitelisted";
  args: {
    _address: string;
    0: string;
  };
}

export interface Withdrawal {
  name: "Withdrawal";
  args: {
    _bAsset: string;
    _pToken: string;
    _amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

type AllEvents =
  | Deposit
  | PTokenAdded
  | PlatformWithdrawal
  | RewardTokenApproved
  | SkippedWithdrawal
  | Whitelisted
  | Withdrawal;

export interface CompoundIntegrationInstance extends Truffle.ContractInstance {
  approveRewardToken: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  bAssetToPToken(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  checkBalance: {
    (_bAsset: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_bAsset: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(
      _bAsset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAsset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deposit: {
    (
      _bAsset: string,
      _amount: number | BN | string,
      _hasTxFee: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bAsset: string,
      _amount: number | BN | string,
      _hasTxFee: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _bAsset: string,
      _amount: number | BN | string,
      _hasTxFee: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAsset: string,
      _amount: number | BN | string,
      _hasTxFee: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _nexus: string,
      _whitelisted: string[],
      _platformAddress: string,
      _bAssets: string[],
      _pTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _nexus: string,
      _whitelisted: string[],
      _platformAddress: string,
      _bAssets: string[],
      _pTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _nexus: string,
      _whitelisted: string[],
      _platformAddress: string,
      _bAssets: string[],
      _pTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _nexus: string,
      _whitelisted: string[],
      _platformAddress: string,
      _bAssets: string[],
      _pTokens: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  nexus(txDetails?: Truffle.TransactionDetails): Promise<string>;

  platformAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

  reApproveAllTokens: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  setPTokenAddress: {
    (
      _bAsset: string,
      _pToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bAsset: string,
      _pToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _bAsset: string,
      _pToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAsset: string,
      _pToken: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  whitelist(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<boolean>;

  withdrawRaw: {
    (
      _receiver: string,
      _bAsset: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _receiver: string,
      _bAsset: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _receiver: string,
      _bAsset: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _receiver: string,
      _bAsset: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    approveRewardToken: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    bAssetToPToken(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    checkBalance: {
      (_bAsset: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _bAsset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _bAsset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAsset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    deposit: {
      (
        _bAsset: string,
        _amount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bAsset: string,
        _amount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _bAsset: string,
        _amount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAsset: string,
        _amount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    initialize: {
      (
        _nexus: string,
        _whitelisted: string[],
        _platformAddress: string,
        _bAssets: string[],
        _pTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _nexus: string,
        _whitelisted: string[],
        _platformAddress: string,
        _bAssets: string[],
        _pTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _nexus: string,
        _whitelisted: string[],
        _platformAddress: string,
        _bAssets: string[],
        _pTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _nexus: string,
        _whitelisted: string[],
        _platformAddress: string,
        _bAssets: string[],
        _pTokens: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    nexus(txDetails?: Truffle.TransactionDetails): Promise<string>;

    platformAddress(txDetails?: Truffle.TransactionDetails): Promise<string>;

    reApproveAllTokens: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    setPTokenAddress: {
      (
        _bAsset: string,
        _pToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bAsset: string,
        _pToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _bAsset: string,
        _pToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAsset: string,
        _pToken: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    whitelist(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;

    withdrawRaw: {
      (
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "withdraw(address,address,uint256,bool)": {
      (
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "withdraw(address,address,uint256,uint256,bool)": {
      (
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        _totalAmount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        _totalAmount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        _totalAmount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        _totalAmount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
