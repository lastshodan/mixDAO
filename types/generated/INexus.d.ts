/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface INexusContract extends Truffle.Contract<INexusInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<INexusInstance>;
}

type AllEvents = never;

export interface INexusInstance extends Truffle.ContractInstance {
  acceptProposedModule: {
    (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  acceptProposedModules: {
    (_keys: string[], txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _keys: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _keys: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _keys: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelLockModule: {
    (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  cancelProposedModule: {
    (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getModule(
    key: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  governor(txDetails?: Truffle.TransactionDetails): Promise<string>;

  lockModule: {
    (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  proposeModule: {
    (
      _key: string,
      _addr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _key: string,
      _addr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _key: string,
      _addr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _key: string,
      _addr: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  requestLockModule: {
    (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    acceptProposedModule: {
      (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    acceptProposedModules: {
      (_keys: string[], txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _keys: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _keys: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _keys: string[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cancelLockModule: {
      (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    cancelProposedModule: {
      (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getModule(
      key: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    governor(txDetails?: Truffle.TransactionDetails): Promise<string>;

    lockModule: {
      (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    proposeModule: {
      (
        _key: string,
        _addr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _key: string,
        _addr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _key: string,
        _addr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _key: string,
        _addr: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    requestLockModule: {
      (_key: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_key: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _key: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
