/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ForgeValidatorContract
  extends Truffle.Contract<ForgeValidatorInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<ForgeValidatorInstance>;
}

type AllEvents = never;

export interface ForgeValidatorInstance extends Truffle.ContractInstance {
  calculateRedemptionMulti(
    _mIxQuantity: number | BN | string,
    _allBassets: {
      addr: string;
      status: number | BN | string;
      isTransferFeeCharged: boolean;
      ratio: number | BN | string;
      maxWeight: number | BN | string;
      vaultBalance: number | BN | string;
    }[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<[boolean, string, BN[]]>;

  validateMint(
    _totalVault: number | BN | string,
    _bAsset: {
      addr: string;
      status: number | BN | string;
      isTransferFeeCharged: boolean;
      ratio: number | BN | string;
      maxWeight: number | BN | string;
      vaultBalance: number | BN | string;
    },
    _bAssetQuantity: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[boolean, string]>;

  validateMintMulti(
    _totalVault: number | BN | string,
    _bAssets: {
      addr: string;
      status: number | BN | string;
      isTransferFeeCharged: boolean;
      ratio: number | BN | string;
      maxWeight: number | BN | string;
      vaultBalance: number | BN | string;
    }[],
    _bAssetQuantities: (number | BN | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<[boolean, string]>;

  validateRedemption(
    _basketIsFailed: boolean,
    _totalVault: number | BN | string,
    _allBassets: {
      addr: string;
      status: number | BN | string;
      isTransferFeeCharged: boolean;
      ratio: number | BN | string;
      maxWeight: number | BN | string;
      vaultBalance: number | BN | string;
    }[],
    _indices: (number | BN | string)[],
    _bAssetQuantities: (number | BN | string)[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<[boolean, string, boolean]>;

  validateSwap(
    _totalVault: number | BN | string,
    _inputBasset: {
      addr: string;
      status: number | BN | string;
      isTransferFeeCharged: boolean;
      ratio: number | BN | string;
      maxWeight: number | BN | string;
      vaultBalance: number | BN | string;
    },
    _outputBasset: {
      addr: string;
      status: number | BN | string;
      isTransferFeeCharged: boolean;
      ratio: number | BN | string;
      maxWeight: number | BN | string;
      vaultBalance: number | BN | string;
    },
    _quantity: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[boolean, string, BN, boolean]>;

  methods: {
    calculateRedemptionMulti(
      _mIxQuantity: number | BN | string,
      _allBassets: {
        addr: string;
        status: number | BN | string;
        isTransferFeeCharged: boolean;
        ratio: number | BN | string;
        maxWeight: number | BN | string;
        vaultBalance: number | BN | string;
      }[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, string, BN[]]>;

    validateMint(
      _totalVault: number | BN | string,
      _bAsset: {
        addr: string;
        status: number | BN | string;
        isTransferFeeCharged: boolean;
        ratio: number | BN | string;
        maxWeight: number | BN | string;
        vaultBalance: number | BN | string;
      },
      _bAssetQuantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, string]>;

    validateMintMulti(
      _totalVault: number | BN | string,
      _bAssets: {
        addr: string;
        status: number | BN | string;
        isTransferFeeCharged: boolean;
        ratio: number | BN | string;
        maxWeight: number | BN | string;
        vaultBalance: number | BN | string;
      }[],
      _bAssetQuantities: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, string]>;

    validateRedemption(
      _basketIsFailed: boolean,
      _totalVault: number | BN | string,
      _allBassets: {
        addr: string;
        status: number | BN | string;
        isTransferFeeCharged: boolean;
        ratio: number | BN | string;
        maxWeight: number | BN | string;
        vaultBalance: number | BN | string;
      }[],
      _indices: (number | BN | string)[],
      _bAssetQuantities: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, string, boolean]>;

    validateSwap(
      _totalVault: number | BN | string,
      _inputBasset: {
        addr: string;
        status: number | BN | string;
        isTransferFeeCharged: boolean;
        ratio: number | BN | string;
        maxWeight: number | BN | string;
        vaultBalance: number | BN | string;
      },
      _outputBasset: {
        addr: string;
        status: number | BN | string;
        isTransferFeeCharged: boolean;
        ratio: number | BN | string;
        maxWeight: number | BN | string;
        vaultBalance: number | BN | string;
      },
      _quantity: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[boolean, string, BN, boolean]>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
