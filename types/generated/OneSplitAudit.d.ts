/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface OneSplitAuditContract
  extends Truffle.Contract<OneSplitAuditInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<OneSplitAuditInstance>;
}

type AllEvents = never;

export interface OneSplitAuditInstance extends Truffle.ContractInstance {
  getExpectedReturn(
    fromToken: string,
    destToken: string,
    amount: number | BN | string,
    parts: number | BN | string,
    flags: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN[]]>;

  swap: {
    (
      fromToken: string,
      destToken: string,
      amount: number | BN | string,
      minReturn: number | BN | string,
      distribution: (number | BN | string)[],
      flags: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      fromToken: string,
      destToken: string,
      amount: number | BN | string,
      minReturn: number | BN | string,
      distribution: (number | BN | string)[],
      flags: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      fromToken: string,
      destToken: string,
      amount: number | BN | string,
      minReturn: number | BN | string,
      distribution: (number | BN | string)[],
      flags: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      fromToken: string,
      destToken: string,
      amount: number | BN | string,
      minReturn: number | BN | string,
      distribution: (number | BN | string)[],
      flags: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    getExpectedReturn(
      fromToken: string,
      destToken: string,
      amount: number | BN | string,
      parts: number | BN | string,
      flags: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN[]]>;

    swap: {
      (
        fromToken: string,
        destToken: string,
        amount: number | BN | string,
        minReturn: number | BN | string,
        distribution: (number | BN | string)[],
        flags: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        fromToken: string,
        destToken: string,
        amount: number | BN | string,
        minReturn: number | BN | string,
        distribution: (number | BN | string)[],
        flags: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        fromToken: string,
        destToken: string,
        amount: number | BN | string,
        minReturn: number | BN | string,
        distribution: (number | BN | string)[],
        flags: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        fromToken: string,
        destToken: string,
        amount: number | BN | string,
        minReturn: number | BN | string,
        distribution: (number | BN | string)[],
        flags: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
