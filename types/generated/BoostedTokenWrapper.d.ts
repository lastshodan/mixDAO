/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface BoostedTokenWrapperContract
  extends Truffle.Contract<BoostedTokenWrapperInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<BoostedTokenWrapperInstance>;
}

type AllEvents = never;

export interface BoostedTokenWrapperInstance extends Truffle.ContractInstance {
  balanceOf(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getBoost(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  rawBalanceOf(
    _account: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  stakingContract(txDetails?: Truffle.TransactionDetails): Promise<string>;

  stakingToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

  totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  methods: {
    balanceOf(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getBoost(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    rawBalanceOf(
      _account: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    stakingContract(txDetails?: Truffle.TransactionDetails): Promise<string>;

    stakingToken(txDetails?: Truffle.TransactionDetails): Promise<string>;

    totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
