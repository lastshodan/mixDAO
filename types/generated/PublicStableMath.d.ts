/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface PublicStableMathContract
  extends Truffle.Contract<PublicStableMathInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<PublicStableMathInstance>;
}

type AllEvents = never;

export interface PublicStableMathInstance extends Truffle.ContractInstance {
  clamp(
    x: number | BN | string,
    upperBound: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  divPrecisely(
    x: number | BN | string,
    y: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  divRatioPrecisely(
    x: number | BN | string,
    ratio: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  getFullScale(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  getRatioScale(txDetails?: Truffle.TransactionDetails): Promise<BN>;

  max(
    x: number | BN | string,
    y: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  min(
    x: number | BN | string,
    y: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  mulRatioTruncate(
    x: number | BN | string,
    ratio: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  mulRatioTruncateCeil(
    x: number | BN | string,
    ratio: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  mulTruncate(
    x: number | BN | string,
    y: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  mulTruncateCeil(
    x: number | BN | string,
    y: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  mulTruncateScale(
    x: number | BN | string,
    y: number | BN | string,
    scale: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  scaleInteger(
    x: number | BN | string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  methods: {
    clamp(
      x: number | BN | string,
      upperBound: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    divPrecisely(
      x: number | BN | string,
      y: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    divRatioPrecisely(
      x: number | BN | string,
      ratio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    getFullScale(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    getRatioScale(txDetails?: Truffle.TransactionDetails): Promise<BN>;

    max(
      x: number | BN | string,
      y: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    min(
      x: number | BN | string,
      y: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    mulRatioTruncate(
      x: number | BN | string,
      ratio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    mulRatioTruncateCeil(
      x: number | BN | string,
      ratio: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    mulTruncate(
      x: number | BN | string,
      y: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    mulTruncateCeil(
      x: number | BN | string,
      y: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    mulTruncateScale(
      x: number | BN | string,
      y: number | BN | string,
      scale: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    scaleInteger(
      x: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
