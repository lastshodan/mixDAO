/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IPlatformIntegrationContract
  extends Truffle.Contract<IPlatformIntegrationInstance> {
  "new"(
    meta?: Truffle.TransactionDetails
  ): Promise<IPlatformIntegrationInstance>;
}

type AllEvents = never;

export interface IPlatformIntegrationInstance extends Truffle.ContractInstance {
  bAssetToPToken: {
    (_bAsset: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _bAsset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    sendTransaction(
      _bAsset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAsset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  checkBalance: {
    (_bAsset: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_bAsset: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;
    sendTransaction(
      _bAsset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAsset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  deposit: {
    (
      _bAsset: string,
      _amount: number | BN | string,
      isTokenFeeCharged: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bAsset: string,
      _amount: number | BN | string,
      isTokenFeeCharged: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _bAsset: string,
      _amount: number | BN | string,
      isTokenFeeCharged: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAsset: string,
      _amount: number | BN | string,
      isTokenFeeCharged: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  withdrawRaw: {
    (
      _receiver: string,
      _bAsset: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _receiver: string,
      _bAsset: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _receiver: string,
      _bAsset: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _receiver: string,
      _bAsset: string,
      _amount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    bAssetToPToken: {
      (_bAsset: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _bAsset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      sendTransaction(
        _bAsset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAsset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    checkBalance: {
      (_bAsset: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _bAsset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _bAsset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAsset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    deposit: {
      (
        _bAsset: string,
        _amount: number | BN | string,
        isTokenFeeCharged: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bAsset: string,
        _amount: number | BN | string,
        isTokenFeeCharged: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _bAsset: string,
        _amount: number | BN | string,
        isTokenFeeCharged: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAsset: string,
        _amount: number | BN | string,
        isTokenFeeCharged: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    withdrawRaw: {
      (
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "withdraw(address,address,uint256,bool)": {
      (
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    "withdraw(address,address,uint256,uint256,bool)": {
      (
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        _totalAmount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        _totalAmount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        _totalAmount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _receiver: string,
        _bAsset: string,
        _amount: number | BN | string,
        _totalAmount: number | BN | string,
        _hasTxFee: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
