/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface IBasketManagerContract
  extends Truffle.Contract<IBasketManagerInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<IBasketManagerInstance>;
}

type AllEvents = never;

export interface IBasketManagerInstance extends Truffle.ContractInstance {
  addBasset: {
    (
      _basset: string,
      _integration: string,
      _isTransferFeeCharged: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _basset: string,
      _integration: string,
      _isTransferFeeCharged: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;
    sendTransaction(
      _basset: string,
      _integration: string,
      _isTransferFeeCharged: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _basset: string,
      _integration: string,
      _isTransferFeeCharged: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  collectInterest: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<[BN, BN[]]>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  decreaseVaultBalance: {
    (
      _bAsset: number | BN | string,
      _integrator: string,
      _decreaseAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bAsset: number | BN | string,
      _integrator: string,
      _decreaseAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _bAsset: number | BN | string,
      _integrator: string,
      _decreaseAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAsset: number | BN | string,
      _integrator: string,
      _decreaseAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  decreaseVaultBalances: {
    (
      _bAsset: (number | BN | string)[],
      _integrator: string[],
      _decreaseAmount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bAsset: (number | BN | string)[],
      _integrator: string[],
      _decreaseAmount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _bAsset: (number | BN | string)[],
      _integrator: string[],
      _decreaseAmount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAsset: (number | BN | string)[],
      _integrator: string[],
      _decreaseAmount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  getBasket(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    bassets: {
      addr: string;
      status: BN;
      isTransferFeeCharged: boolean;
      ratio: BN;
      maxWeight: BN;
      vaultBalance: BN;
    }[];
    maxBassets: BN;
    undergoingRecol: boolean;
    failed: boolean;
    collateralisationRatio: BN;
  }>;

  getBasset(
    _token: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    addr: string;
    status: BN;
    isTransferFeeCharged: boolean;
    ratio: BN;
    maxWeight: BN;
    vaultBalance: BN;
  }>;

  getBassets(
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    [
      {
        addr: string;
        status: BN;
        isTransferFeeCharged: boolean;
        ratio: BN;
        maxWeight: BN;
        vaultBalance: BN;
      }[],
      BN
    ]
  >;

  handlePegLoss: {
    (
      _basset: string,
      _belowPeg: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _basset: string,
      _belowPeg: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<boolean>;
    sendTransaction(
      _basset: string,
      _belowPeg: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _basset: string,
      _belowPeg: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseVaultBalance: {
    (
      _bAsset: number | BN | string,
      _integrator: string,
      _increaseAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bAsset: number | BN | string,
      _integrator: string,
      _increaseAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _bAsset: number | BN | string,
      _integrator: string,
      _increaseAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAsset: number | BN | string,
      _integrator: string,
      _increaseAmount: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  increaseVaultBalances: {
    (
      _bAsset: (number | BN | string)[],
      _integrator: string[],
      _increaseAmount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bAsset: (number | BN | string)[],
      _integrator: string[],
      _increaseAmount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _bAsset: (number | BN | string)[],
      _integrator: string[],
      _increaseAmount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAsset: (number | BN | string)[],
      _integrator: string[],
      _increaseAmount: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  negateIsolation: {
    (_basset: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _basset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _basset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _basset: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  prepareForgeBasset: {
    (
      _token: string,
      _amt: number | BN | string,
      _mint: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _token: string,
      _amt: number | BN | string,
      _mint: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      [
        boolean,
        {
          bAsset: {
            addr: string;
            status: BN;
            isTransferFeeCharged: boolean;
            ratio: BN;
            maxWeight: BN;
            vaultBalance: BN;
          };
          integrator: string;
          index: BN;
        }
      ]
    >;
    sendTransaction(
      _token: string,
      _amt: number | BN | string,
      _mint: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _token: string,
      _amt: number | BN | string,
      _mint: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  prepareForgeBassets: {
    (
      _bAssets: string[],
      _amts: (number | BN | string)[],
      _mint: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bAssets: string[],
      _amts: (number | BN | string)[],
      _mint: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      isValid: boolean;
      bAssets: {
        addr: string;
        status: BN;
        isTransferFeeCharged: boolean;
        ratio: BN;
        maxWeight: BN;
        vaultBalance: BN;
      }[];
      integrators: string[];
      indexes: BN[];
    }>;
    sendTransaction(
      _bAssets: string[],
      _amts: (number | BN | string)[],
      _mint: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAssets: string[],
      _amts: (number | BN | string)[],
      _mint: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  prepareRedeemBassets(
    _bAssets: string[],
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    isValid: boolean;
    allBassets: {
      addr: string;
      status: BN;
      isTransferFeeCharged: boolean;
      ratio: BN;
      maxWeight: BN;
      vaultBalance: BN;
    }[];
    bAssets: {
      addr: string;
      status: BN;
      isTransferFeeCharged: boolean;
      ratio: BN;
      maxWeight: BN;
      vaultBalance: BN;
    }[];
    integrators: string[];
    indexes: BN[];
  }>;

  prepareRedeemMulti(
    txDetails?: Truffle.TransactionDetails
  ): Promise<{
    colRatio: BN;
    bAssets: {
      addr: string;
      status: BN;
      isTransferFeeCharged: boolean;
      ratio: BN;
      maxWeight: BN;
      vaultBalance: BN;
    }[];
    integrators: string[];
    indexes: BN[];
  }>;

  prepareSwapBassets(
    _input: string,
    _output: string,
    _isMint: boolean,
    txDetails?: Truffle.TransactionDetails
  ): Promise<
    [
      boolean,
      string,
      {
        bAsset: {
          addr: string;
          status: BN;
          isTransferFeeCharged: boolean;
          ratio: BN;
          maxWeight: BN;
          vaultBalance: BN;
        };
        integrator: string;
        index: BN;
      },
      {
        bAsset: {
          addr: string;
          status: BN;
          isTransferFeeCharged: boolean;
          ratio: BN;
          maxWeight: BN;
          vaultBalance: BN;
        };
        integrator: string;
        index: BN;
      }
    ]
  >;

  setBasketWeights: {
    (
      _bassets: string[],
      _weights: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bassets: string[],
      _weights: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _bassets: string[],
      _weights: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bassets: string[],
      _weights: (number | BN | string)[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setTransferFeesFlag: {
    (
      _bAsset: string,
      _flag: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _bAsset: string,
      _flag: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _bAsset: string,
      _flag: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _bAsset: string,
      _flag: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    addBasset: {
      (
        _basset: string,
        _integration: string,
        _isTransferFeeCharged: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _basset: string,
        _integration: string,
        _isTransferFeeCharged: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<BN>;
      sendTransaction(
        _basset: string,
        _integration: string,
        _isTransferFeeCharged: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _basset: string,
        _integration: string,
        _isTransferFeeCharged: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    collectInterest: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<[BN, BN[]]>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    decreaseVaultBalance: {
      (
        _bAsset: number | BN | string,
        _integrator: string,
        _decreaseAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bAsset: number | BN | string,
        _integrator: string,
        _decreaseAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _bAsset: number | BN | string,
        _integrator: string,
        _decreaseAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAsset: number | BN | string,
        _integrator: string,
        _decreaseAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    decreaseVaultBalances: {
      (
        _bAsset: (number | BN | string)[],
        _integrator: string[],
        _decreaseAmount: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bAsset: (number | BN | string)[],
        _integrator: string[],
        _decreaseAmount: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _bAsset: (number | BN | string)[],
        _integrator: string[],
        _decreaseAmount: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAsset: (number | BN | string)[],
        _integrator: string[],
        _decreaseAmount: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    getBasket(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      bassets: {
        addr: string;
        status: BN;
        isTransferFeeCharged: boolean;
        ratio: BN;
        maxWeight: BN;
        vaultBalance: BN;
      }[];
      maxBassets: BN;
      undergoingRecol: boolean;
      failed: boolean;
      collateralisationRatio: BN;
    }>;

    getBasset(
      _token: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      addr: string;
      status: BN;
      isTransferFeeCharged: boolean;
      ratio: BN;
      maxWeight: BN;
      vaultBalance: BN;
    }>;

    getBassets(
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      [
        {
          addr: string;
          status: BN;
          isTransferFeeCharged: boolean;
          ratio: BN;
          maxWeight: BN;
          vaultBalance: BN;
        }[],
        BN
      ]
    >;

    handlePegLoss: {
      (
        _basset: string,
        _belowPeg: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _basset: string,
        _belowPeg: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<boolean>;
      sendTransaction(
        _basset: string,
        _belowPeg: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _basset: string,
        _belowPeg: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    increaseVaultBalance: {
      (
        _bAsset: number | BN | string,
        _integrator: string,
        _increaseAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bAsset: number | BN | string,
        _integrator: string,
        _increaseAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _bAsset: number | BN | string,
        _integrator: string,
        _increaseAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAsset: number | BN | string,
        _integrator: string,
        _increaseAmount: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    increaseVaultBalances: {
      (
        _bAsset: (number | BN | string)[],
        _integrator: string[],
        _increaseAmount: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bAsset: (number | BN | string)[],
        _integrator: string[],
        _increaseAmount: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _bAsset: (number | BN | string)[],
        _integrator: string[],
        _increaseAmount: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAsset: (number | BN | string)[],
        _integrator: string[],
        _increaseAmount: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    negateIsolation: {
      (_basset: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _basset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _basset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _basset: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    prepareForgeBasset: {
      (
        _token: string,
        _amt: number | BN | string,
        _mint: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _token: string,
        _amt: number | BN | string,
        _mint: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<
        [
          boolean,
          {
            bAsset: {
              addr: string;
              status: BN;
              isTransferFeeCharged: boolean;
              ratio: BN;
              maxWeight: BN;
              vaultBalance: BN;
            };
            integrator: string;
            index: BN;
          }
        ]
      >;
      sendTransaction(
        _token: string,
        _amt: number | BN | string,
        _mint: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _token: string,
        _amt: number | BN | string,
        _mint: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    prepareForgeBassets: {
      (
        _bAssets: string[],
        _amts: (number | BN | string)[],
        _mint: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bAssets: string[],
        _amts: (number | BN | string)[],
        _mint: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<{
        isValid: boolean;
        bAssets: {
          addr: string;
          status: BN;
          isTransferFeeCharged: boolean;
          ratio: BN;
          maxWeight: BN;
          vaultBalance: BN;
        }[];
        integrators: string[];
        indexes: BN[];
      }>;
      sendTransaction(
        _bAssets: string[],
        _amts: (number | BN | string)[],
        _mint: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAssets: string[],
        _amts: (number | BN | string)[],
        _mint: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    prepareRedeemBassets(
      _bAssets: string[],
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      isValid: boolean;
      allBassets: {
        addr: string;
        status: BN;
        isTransferFeeCharged: boolean;
        ratio: BN;
        maxWeight: BN;
        vaultBalance: BN;
      }[];
      bAssets: {
        addr: string;
        status: BN;
        isTransferFeeCharged: boolean;
        ratio: BN;
        maxWeight: BN;
        vaultBalance: BN;
      }[];
      integrators: string[];
      indexes: BN[];
    }>;

    prepareRedeemMulti(
      txDetails?: Truffle.TransactionDetails
    ): Promise<{
      colRatio: BN;
      bAssets: {
        addr: string;
        status: BN;
        isTransferFeeCharged: boolean;
        ratio: BN;
        maxWeight: BN;
        vaultBalance: BN;
      }[];
      integrators: string[];
      indexes: BN[];
    }>;

    prepareSwapBassets(
      _input: string,
      _output: string,
      _isMint: boolean,
      txDetails?: Truffle.TransactionDetails
    ): Promise<
      [
        boolean,
        string,
        {
          bAsset: {
            addr: string;
            status: BN;
            isTransferFeeCharged: boolean;
            ratio: BN;
            maxWeight: BN;
            vaultBalance: BN;
          };
          integrator: string;
          index: BN;
        },
        {
          bAsset: {
            addr: string;
            status: BN;
            isTransferFeeCharged: boolean;
            ratio: BN;
            maxWeight: BN;
            vaultBalance: BN;
          };
          integrator: string;
          index: BN;
        }
      ]
    >;

    setBasketWeights: {
      (
        _bassets: string[],
        _weights: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bassets: string[],
        _weights: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _bassets: string[],
        _weights: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bassets: string[],
        _weights: (number | BN | string)[],
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setTransferFeesFlag: {
      (
        _bAsset: string,
        _flag: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _bAsset: string,
        _flag: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _bAsset: string,
        _flag: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _bAsset: string,
        _flag: boolean,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
