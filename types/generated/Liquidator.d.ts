/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface LiquidatorContract
  extends Truffle.Contract<LiquidatorInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<LiquidatorInstance>;
}

export interface Liquidated {
  name: "Liquidated";
  args: {
    sellToken: string;
    mUSD: string;
    mUSDAmount: BN;
    buyToken: string;
    0: string;
    1: string;
    2: BN;
    3: string;
  };
}

export interface LiquidationEnded {
  name: "LiquidationEnded";
  args: {
    integration: string;
    0: string;
  };
}

export interface LiquidationModified {
  name: "LiquidationModified";
  args: {
    integration: string;
    0: string;
  };
}

type AllEvents = Liquidated | LiquidationEnded | LiquidationModified;

export interface LiquidatorInstance extends Truffle.ContractInstance {
  createLiquidation: {
    (
      _integration: string,
      _sellToken: string,
      _bAsset: string,
      _curvePosition: number | BN | string,
      _uniswapPath: string[],
      _trancheAmount: number | BN | string,
      _minReturn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _integration: string,
      _sellToken: string,
      _bAsset: string,
      _curvePosition: number | BN | string,
      _uniswapPath: string[],
      _trancheAmount: number | BN | string,
      _minReturn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _integration: string,
      _sellToken: string,
      _bAsset: string,
      _curvePosition: number | BN | string,
      _uniswapPath: string[],
      _trancheAmount: number | BN | string,
      _minReturn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _integration: string,
      _sellToken: string,
      _bAsset: string,
      _curvePosition: number | BN | string,
      _uniswapPath: string[],
      _trancheAmount: number | BN | string,
      _minReturn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  curve(txDetails?: Truffle.TransactionDetails): Promise<string>;

  deleteLiquidation: {
    (_integration: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _integration: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _integration: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _integration: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  initialize: {
    (
      _nexus: string,
      _uniswap: string,
      _curve: string,
      _mUSD: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _nexus: string,
      _uniswap: string,
      _curve: string,
      _mUSD: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _nexus: string,
      _uniswap: string,
      _curve: string,
      _mUSD: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _nexus: string,
      _uniswap: string,
      _curve: string,
      _mUSD: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  liquidations(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[string, string, BN, BN, BN]>;

  mUSD(txDetails?: Truffle.TransactionDetails): Promise<string>;

  minReturn(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<BN>;

  nexus(txDetails?: Truffle.TransactionDetails): Promise<string>;

  triggerLiquidation: {
    (_integration: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _integration: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _integration: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _integration: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  uniswap(txDetails?: Truffle.TransactionDetails): Promise<string>;

  updateBasset: {
    (
      _integration: string,
      _bAsset: string,
      _curvePosition: number | BN | string,
      _uniswapPath: string[],
      _trancheAmount: number | BN | string,
      _minReturn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _integration: string,
      _bAsset: string,
      _curvePosition: number | BN | string,
      _uniswapPath: string[],
      _trancheAmount: number | BN | string,
      _minReturn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _integration: string,
      _bAsset: string,
      _curvePosition: number | BN | string,
      _uniswapPath: string[],
      _trancheAmount: number | BN | string,
      _minReturn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _integration: string,
      _bAsset: string,
      _curvePosition: number | BN | string,
      _uniswapPath: string[],
      _trancheAmount: number | BN | string,
      _minReturn: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    createLiquidation: {
      (
        _integration: string,
        _sellToken: string,
        _bAsset: string,
        _curvePosition: number | BN | string,
        _uniswapPath: string[],
        _trancheAmount: number | BN | string,
        _minReturn: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _integration: string,
        _sellToken: string,
        _bAsset: string,
        _curvePosition: number | BN | string,
        _uniswapPath: string[],
        _trancheAmount: number | BN | string,
        _minReturn: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _integration: string,
        _sellToken: string,
        _bAsset: string,
        _curvePosition: number | BN | string,
        _uniswapPath: string[],
        _trancheAmount: number | BN | string,
        _minReturn: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _integration: string,
        _sellToken: string,
        _bAsset: string,
        _curvePosition: number | BN | string,
        _uniswapPath: string[],
        _trancheAmount: number | BN | string,
        _minReturn: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    curve(txDetails?: Truffle.TransactionDetails): Promise<string>;

    deleteLiquidation: {
      (_integration: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _integration: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _integration: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _integration: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    initialize: {
      (
        _nexus: string,
        _uniswap: string,
        _curve: string,
        _mUSD: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _nexus: string,
        _uniswap: string,
        _curve: string,
        _mUSD: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _nexus: string,
        _uniswap: string,
        _curve: string,
        _mUSD: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _nexus: string,
        _uniswap: string,
        _curve: string,
        _mUSD: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    liquidations(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[string, string, BN, BN, BN]>;

    mUSD(txDetails?: Truffle.TransactionDetails): Promise<string>;

    minReturn(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    nexus(txDetails?: Truffle.TransactionDetails): Promise<string>;

    triggerLiquidation: {
      (_integration: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _integration: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _integration: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _integration: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    uniswap(txDetails?: Truffle.TransactionDetails): Promise<string>;

    updateBasset: {
      (
        _integration: string,
        _bAsset: string,
        _curvePosition: number | BN | string,
        _uniswapPath: string[],
        _trancheAmount: number | BN | string,
        _minReturn: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _integration: string,
        _bAsset: string,
        _curvePosition: number | BN | string,
        _uniswapPath: string[],
        _trancheAmount: number | BN | string,
        _minReturn: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _integration: string,
        _bAsset: string,
        _curvePosition: number | BN | string,
        _uniswapPath: string[],
        _trancheAmount: number | BN | string,
        _minReturn: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _integration: string,
        _bAsset: string,
        _curvePosition: number | BN | string,
        _uniswapPath: string[],
        _trancheAmount: number | BN | string,
        _minReturn: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
