/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface ClaimableGovernorContract
  extends Truffle.Contract<ClaimableGovernorInstance> {
  "new"(
    _governorAddr: string,
    meta?: Truffle.TransactionDetails
  ): Promise<ClaimableGovernorInstance>;
}

export interface GovernorChangeCancelled {
  name: "GovernorChangeCancelled";
  args: {
    governor: string;
    proposed: string;
    0: string;
    1: string;
  };
}

export interface GovernorChangeClaimed {
  name: "GovernorChangeClaimed";
  args: {
    proposedGovernor: string;
    0: string;
  };
}

export interface GovernorChangeRequested {
  name: "GovernorChangeRequested";
  args: {
    governor: string;
    proposed: string;
    0: string;
    1: string;
  };
}

export interface GovernorChanged {
  name: "GovernorChanged";
  args: {
    previousGovernor: string;
    newGovernor: string;
    0: string;
    1: string;
  };
}

type AllEvents =
  | GovernorChangeCancelled
  | GovernorChangeClaimed
  | GovernorChangeRequested
  | GovernorChanged;

export interface ClaimableGovernorInstance extends Truffle.ContractInstance {
  cancelGovernorChange: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  changeGovernor: {
    (arg0: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  claimGovernorChange: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  governor(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isGovernor(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  proposedGovernor(txDetails?: Truffle.TransactionDetails): Promise<string>;

  requestGovernorChange: {
    (
      _proposedGovernor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _proposedGovernor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _proposedGovernor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _proposedGovernor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  methods: {
    cancelGovernorChange: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    changeGovernor: {
      (arg0: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(arg0: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        arg0: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        arg0: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    claimGovernorChange: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    governor(txDetails?: Truffle.TransactionDetails): Promise<string>;

    isGovernor(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    proposedGovernor(txDetails?: Truffle.TransactionDetails): Promise<string>;

    requestGovernorChange: {
      (
        _proposedGovernor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _proposedGovernor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _proposedGovernor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _proposedGovernor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
