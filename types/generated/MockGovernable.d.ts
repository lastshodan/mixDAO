/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface MockGovernableContract
  extends Truffle.Contract<MockGovernableInstance> {
  "new"(meta?: Truffle.TransactionDetails): Promise<MockGovernableInstance>;
}

export interface GovernorChanged {
  name: "GovernorChanged";
  args: {
    previousGovernor: string;
    newGovernor: string;
    0: string;
    1: string;
  };
}

type AllEvents = GovernorChanged;

export interface MockGovernableInstance extends Truffle.ContractInstance {
  changeGovernor: {
    (_newGovernor: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(
      _newGovernor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _newGovernor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _newGovernor: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  governor(txDetails?: Truffle.TransactionDetails): Promise<string>;

  isGovernor(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  methods: {
    changeGovernor: {
      (_newGovernor: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(
        _newGovernor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _newGovernor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _newGovernor: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    governor(txDetails?: Truffle.TransactionDetails): Promise<string>;

    isGovernor(txDetails?: Truffle.TransactionDetails): Promise<boolean>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
