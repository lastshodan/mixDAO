/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { EventData, PastEventOptions } from "web3-eth-contract";

export interface SavingsManagerContract
  extends Truffle.Contract<SavingsManagerInstance> {
  "new"(
    _nexus: string,
    _mUSD: string,
    _savingsContract: string,
    meta?: Truffle.TransactionDetails
  ): Promise<SavingsManagerInstance>;
}

export interface InterestCollected {
  name: "InterestCollected";
  args: {
    mIx: string;
    interest: BN;
    newTotalSupply: BN;
    apy: BN;
    0: string;
    1: BN;
    2: BN;
    3: BN;
  };
}

export interface InterestDistributed {
  name: "InterestDistributed";
  args: {
    mIx: string;
    amountSent: BN;
    0: string;
    1: BN;
  };
}

export interface LiquidatorDeposited {
  name: "LiquidatorDeposited";
  args: {
    mIx: string;
    amount: BN;
    0: string;
    1: BN;
  };
}

export interface Paused {
  name: "Paused";
  args: {
    account: string;
    0: string;
  };
}

export interface RevenueRecipientSet {
  name: "RevenueRecipientSet";
  args: {
    mIx: string;
    recipient: string;
    0: string;
    1: string;
  };
}

export interface RevenueRedistributed {
  name: "RevenueRedistributed";
  args: {
    mIx: string;
    recipient: string;
    amount: BN;
    0: string;
    1: string;
    2: BN;
  };
}

export interface SavingsContractAdded {
  name: "SavingsContractAdded";
  args: {
    mIx: string;
    savingsContract: string;
    0: string;
    1: string;
  };
}

export interface SavingsContractUpdated {
  name: "SavingsContractUpdated";
  args: {
    mIx: string;
    savingsContract: string;
    0: string;
    1: string;
  };
}

export interface SavingsRateChanged {
  name: "SavingsRateChanged";
  args: {
    newSavingsRate: BN;
    0: BN;
  };
}

export interface StreamsFrozen {
  name: "StreamsFrozen";
  args: {};
}

export interface Unpaused {
  name: "Unpaused";
  args: {
    account: string;
    0: string;
  };
}

type AllEvents =
  | InterestCollected
  | InterestDistributed
  | LiquidatorDeposited
  | Paused
  | RevenueRecipientSet
  | RevenueRedistributed
  | SavingsContractAdded
  | SavingsContractUpdated
  | SavingsRateChanged
  | StreamsFrozen
  | Unpaused;

export interface SavingsManagerInstance extends Truffle.ContractInstance {
  addSavingsContract: {
    (
      _mIx: string,
      _savingsContract: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _mIx: string,
      _savingsContract: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _mIx: string,
      _savingsContract: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _mIx: string,
      _savingsContract: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  collectAndDistributeInterest: {
    (_mIx: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_mIx: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _mIx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _mIx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  collectAndStreamInterest: {
    (_mIx: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_mIx: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _mIx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _mIx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  depositLiquidation: {
    (
      _mIx: string,
      _liquidated: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _mIx: string,
      _liquidated: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _mIx: string,
      _liquidated: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _mIx: string,
      _liquidated: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  distributeUnallocatedInterest: {
    (_mIx: string, txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(_mIx: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(
      _mIx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _mIx: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  freezeStreams: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  lastBatchCollected(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  lastCollection(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  lastPeriodStart(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  liqStream(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  nexus(txDetails?: Truffle.TransactionDetails): Promise<string>;

  pause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

  periodYield(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<BN>;

  revenueRecipients(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  savingsContracts(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<string>;

  setRevenueRecipient: {
    (
      _mIx: string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _mIx: string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _mIx: string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _mIx: string,
      _recipient: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  setSavingsRate: {
    (
      _savingsRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _savingsRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _savingsRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _savingsRate: number | BN | string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  unpause: {
    (txDetails?: Truffle.TransactionDetails): Promise<
      Truffle.TransactionResponse<AllEvents>
    >;
    call(txDetails?: Truffle.TransactionDetails): Promise<void>;
    sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
    estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
  };

  updateSavingsContract: {
    (
      _mIx: string,
      _savingsContract: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<Truffle.TransactionResponse<AllEvents>>;
    call(
      _mIx: string,
      _savingsContract: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<void>;
    sendTransaction(
      _mIx: string,
      _savingsContract: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;
    estimateGas(
      _mIx: string,
      _savingsContract: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<number>;
  };

  yieldStream(
    arg0: string,
    txDetails?: Truffle.TransactionDetails
  ): Promise<[BN, BN]>;

  methods: {
    addSavingsContract: {
      (
        _mIx: string,
        _savingsContract: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _mIx: string,
        _savingsContract: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _mIx: string,
        _savingsContract: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _mIx: string,
        _savingsContract: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    collectAndDistributeInterest: {
      (_mIx: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_mIx: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        _mIx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _mIx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    collectAndStreamInterest: {
      (_mIx: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_mIx: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        _mIx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _mIx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    depositLiquidation: {
      (
        _mIx: string,
        _liquidated: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _mIx: string,
        _liquidated: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _mIx: string,
        _liquidated: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _mIx: string,
        _liquidated: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    distributeUnallocatedInterest: {
      (_mIx: string, txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(_mIx: string, txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(
        _mIx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _mIx: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    freezeStreams: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    lastBatchCollected(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    lastCollection(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    lastPeriodStart(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    liqStream(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;

    nexus(txDetails?: Truffle.TransactionDetails): Promise<string>;

    pause: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    paused(txDetails?: Truffle.TransactionDetails): Promise<boolean>;

    periodYield(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<BN>;

    revenueRecipients(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    savingsContracts(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<string>;

    setRevenueRecipient: {
      (
        _mIx: string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _mIx: string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _mIx: string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _mIx: string,
        _recipient: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    setSavingsRate: {
      (
        _savingsRate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _savingsRate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _savingsRate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _savingsRate: number | BN | string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    unpause: {
      (txDetails?: Truffle.TransactionDetails): Promise<
        Truffle.TransactionResponse<AllEvents>
      >;
      call(txDetails?: Truffle.TransactionDetails): Promise<void>;
      sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>;
      estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>;
    };

    updateSavingsContract: {
      (
        _mIx: string,
        _savingsContract: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<Truffle.TransactionResponse<AllEvents>>;
      call(
        _mIx: string,
        _savingsContract: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<void>;
      sendTransaction(
        _mIx: string,
        _savingsContract: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<string>;
      estimateGas(
        _mIx: string,
        _savingsContract: string,
        txDetails?: Truffle.TransactionDetails
      ): Promise<number>;
    };

    yieldStream(
      arg0: string,
      txDetails?: Truffle.TransactionDetails
    ): Promise<[BN, BN]>;
  };

  getPastEvents(event: string): Promise<EventData[]>;
  getPastEvents(
    event: string,
    options: PastEventOptions,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
  getPastEvents(event: string, options: PastEventOptions): Promise<EventData[]>;
  getPastEvents(
    event: string,
    callback: (error: Error, event: EventData) => void
  ): Promise<EventData[]>;
}
